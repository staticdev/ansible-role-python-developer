---
- name: Install pyenv
  ansible.builtin.import_role:
    name: staticdev.pyenv
  vars:
    pyenv_owner: "{{ ansible_env.USER }}"
    pyenv_path: "{{ ansible_env.HOME }}/pyenv"
  when: pyenv_python_versions

- name: Ensure dependencies are installed
  ansible.builtin.package:
    name: "{{ item }}"
    state: present
  become: true
  with_items:
    - python3-pip
    - python3-venv # needed for nox

- name: Check if pipx is installed
  ansible.builtin.command: "{{ ansible_env.HOME }}/.local/bin/pipx --version"
  register: pipx_version_cmd
  changed_when: false
  ignore_errors: true

- name: Install pipx
  ansible.builtin.pip:
    name: pipx
    extra_args: --user
  when: pipx_version_cmd is failed

- name: Check if pre-commit is installed
  ansible.builtin.command: "{{ ansible_env.HOME }}/.local/bin/pre-commit --version"
  register: pre_commit_check
  changed_when: false
  ignore_errors: true

- name: Install pre-commit
  ansible.builtin.command: "{{ ansible_env.HOME }}/.local/bin/pipx install pre-commit"
  register: output
  changed_when: "output.rc == 0"
  when: pre_commit_check is failed

- name: Check if cookiecutter is installed
  ansible.builtin.stat:
    path: "{{ ansible_env.HOME }}/.local/pipx/venvs/cookiecutter"
  register: cookiecutter_folder_check

- name: Install cookiecutter
  ansible.builtin.command: "{{ ansible_env.HOME }}/.local/bin/pipx install cookiecutter"
  register: output
  changed_when: "output.rc == 0"
  when: cookiecutter_folder_check is failed

- name: Check if poetry is installed
  ansible.builtin.command: "{{ ansible_env.HOME }}/.local/bin/poetry"
  register: poetry_cmd
  changed_when: false
  ignore_errors: true

- name: Download poetry installer
  ansible.builtin.get_url:
    url: https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py
    dest: "{{ ansible_env.HOME }}/install-poetry.py"
    mode: "0400"
    timeout: 20
  when: poetry_cmd is failed
  notify: Delete poetry installer

- name: Install poetry
  ansible.builtin.command: "python3 {{ ansible_env.HOME }}/install-poetry.py"
  register: output
  changed_when: "output.rc == 0"
  when: poetry_cmd is failed

- name: Check if nox is installed
  ansible.builtin.command: "{{ ansible_env.HOME }}/.local/bin/nox --version"
  register: nox_version_cmd
  changed_when: false
  ignore_errors: true

- name: Install nox
  ansible.builtin.command: "{{ ansible_env.HOME }}/.local/bin/pipx install nox"
  register: output
  changed_when: "output.rc == 0"
  when: nox_version_cmd is failed

- name: Install nox-poetry
  ansible.builtin.command: "{{ ansible_env.HOME }}/.local/bin/pipx inject nox nox-poetry"
  register: output
  changed_when: "output.rc == 0"
  when: nox_version_cmd is failed
